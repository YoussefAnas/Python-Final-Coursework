import time
import random
import math


def gcd(a, b):
    while b:
        a, b = b, a % b
    return a


def extended_gcd(a, b):
    if a == 0:
        return b, 0, 1
    else:
        gcd, x, y = extended_gcd(b % a, a)
        return gcd, y - (b // a) * x, x


def mod_inverse(a, m):
    gcd, x, y = extended_gcd(a, m)
    if gcd != 1:
        raise Exception('Modular inverse does not exist')
    else:
        return x % m


def generate_prime(bits):
    while True:
        n = random.getrandbits(bits)
        if n % 2 != 0:
            prime = True
            for i in range(2, int(math.sqrt(n)) + 1):
                if n % i == 0:
                    prime = False
                    break
            if prime:
                return n


def generate_keypair(bits):
    p = generate_prime(bits)
    q = generate_prime(bits)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = random.randint(2, phi - 1)
    while gcd(e, phi) != 1:
        e = random.randint(2, phi - 1)
    d = mod_inverse(e, phi)
    return (n, e), (n, d)


def factor_modulus(N):
    sqrt_N = int(math.sqrt(N)) + 1
    for i in range(2, sqrt_N):
        if N % i == 0:
            p = i
            q = N // i
            return p, q
    return None, None


def brute_force_private_exponent(public_key):
    N, e = public_key
    p, q = factor_modulus(N)
    phi = (p - 1) * (q - 1)
    d = 2
    while True:
        if (e * d - 1) % phi == 0:
            return d
        d += 1


def encrypt(message, public_key):
    N, e = public_key
    encrypted_message = pow(message, e, N)
    return encrypted_message


def decrypt(encrypted_message, private_key):
    N, d = private_key
    decrypted_message = pow(encrypted_message, d, N)
    return decrypted_message


def test_key_generation(bits):
    start_time = time.perf_counter()
    public_key, private_key = generate_keypair(bits)
    end_time = time.perf_counter()
    print(f"Key generation time for {bits}-bit key: {end_time - start_time:.4f} seconds")
    print("Public key (N, e):", public_key)
    print("Private key (N, d):", private_key)


    # Test factoring N
    p, q = factor_modulus(public_key[0])
    if p and q:
        print("Modulus factored successfully. p =", p, ", q =", q)
    else:
        print("Failed to factorize modulus.")


    # Brute force the private exponent
    brute_force_d = brute_force_private_exponent(public_key)
    print("Brute-forced private exponent:", brute_force_d)


    # Test encryption and decryption
    message = random.randint(2, public_key[0] - 1)
    print("Original message:", message)
    encrypted_message = encrypt(message, public_key)
    print("Encrypted message:", encrypted_message)
    decrypted_message = decrypt(encrypted_message, private_key)
    print("Decrypted message:", decrypted_message)


    print()


if __name__ == "__main__":
    test_key_generation(8)  # Test 8-bit key
    test_key_generation(16)  # Test 16-bit key
